---
jupyter:
  jupytext:
    formats: ipynb,qmd
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.16.7
  kernelspec:
    display_name: Python 3 (ipykernel)
    language: python
    name: python3
---

```{python}
#| tags: [remove-cell]
import warnings

warnings.simplefilter(action="ignore", category=FutureWarning)
```

![](../img/change_values.png)

## Change Values

### Apply Multiple Functions to a DataFrame with Pipe

```{python}
#| tags: [hide-cell]
!pip install textblob
```

To increase code readability when applying multiple functions to a DataFrame, use the `pandas.DataFrame.pipe` method.

```{python}
import pandas as pd


def get_sum(df):
    df["sum"] = df.a + df.b
    return df


def drop_column(df, col_name):
    return df.drop(col_name, axis=1)


df = pd.DataFrame({"a": [1, 2, 3], "b": [4, 5, 6]})

df.pipe(get_sum).pipe(drop_column, "a")
```

### Apply a Function to a Column of a DataFrame

If you want to apply only one function to a column of a DataFrame, use `apply`.

```{python}
import pandas as pd

df = pd.DataFrame({"col1": [1, 2], "col2": [3, 4]})
df
```

```{python}
df["col1"] = df["col1"].apply(lambda row: row * 2)
df
```

### Apply a Function to a DataFrame Elementwise

The `apply` method applies a function along an axis of a DataFrame. If you want to apply a function to a DataFrame elementwise, use `applymap`.

```{python}
import pandas as pd

df = pd.DataFrame({"col1": [2, 9], "col2": [3, 7]})
df
```

```{python}
df.applymap(lambda val: "failed" if val < 5 else "passed")
```

### Assign Values to Multiple New Columns

If you want to assign values to multiple new columns, instead of assigning them separately, you can do everything in one line of code with `df.assign`.

In the code below, I first created `col3` then use `col3` to create `col4`. Everything is in one line of code.

```{python}
import pandas as pd

df = pd.DataFrame({"col1": [1, 2], "col2": [3, 4]})

df = df.assign(col3=lambda x: x.col1 * 100 + x.col2).assign(
    col4=lambda x: x.col2 * x.col3
)
df
```

### pandas.Series.map: Change Values of a Pandas Series Using a Dictionary	

If you want to change values of a pandas Series using a dictionary, use `pd.Series.map`.

```{python}
import pandas as pd

s = pd.Series(["a", "b", "c"])

s.map({"a": 1, "b": 2, "c": 3})
```

`map` also allows you to insert a string to a pandas Series using `format`. 

```{python}
import pandas as pd

s = pd.Series(["berries", "apples", "cherries"])
s.map("Today I got some {} from my garden.".format)
```

### pandas.DataFrame.explode: Transform Each Element in an Iterable to a Row

When working with `pandas DataFrame`, if you want to transform each element in an iterable to a row, use `explode`.

```{python}
import pandas as pd

df = pd.DataFrame({"a": [[1, 2], [4, 5]], "b": [11, 13]})
df
```

```{python}
df.explode("a")
```

### Split a String into Multiple Rows

Sometimes, you might have a column whose values are strings representing different items such as `"1, 2"`. 

```{python}
import pandas as pd

df = pd.DataFrame({"a": ["1,2", "4,5"], "b": [11, 13]})
df
```

To turn each string into a list, use `Series.str.split()`:

```{python}
# Split by comma
df.a = df.a.str.split(",")
df
```

Now you can split elements in the list into multiple rows using `explode`.

```{python}
df.explode("a")
```

### Forward Fill in pandas: Use the Previous Value to Fill the Current Missing Value

If you want to use the previous value in a column or a row to fill the current missing value in a pandas DataFrame, use `df.fillna(method=’ffill’)`. `ffill` stands for forward fill.

```{python}
import numpy as np
import pandas as pd

df = pd.DataFrame({"a": [1, np.nan, 3], "b": [4, 5, np.nan], "c": [1, 2, 3]})
df
```

```{python}
df = df.fillna(method="ffill")
df
```

### Replace the Missing Values with the Most Frequent Categories in a Column

If you want to replace missing values with the most frequent categories in a column, find the mode of your DataFrame and use it to fill the missing values. 

```{python}
import numpy as np
import pandas as pd

df = pd.DataFrame({"a": [1, 3, np.nan, 3], "b": [4, 5, 4, np.nan]})
df
```

```{python}
df.fillna(df.mode().iloc[0])
```

### Encode Categorical Values in a Pandas DataFrame

There are multiple ways for you to encode a categorical column in a pandas DataFrame. If you simply want to convert each value in a column to a number, use `cat.codes`.  

```{python}
import pandas as pd

df = pd.DataFrame({"col1": ["a", "b", "b", "c"]})

# Convert col1 to a category
df["col1"] = df["col1"].astype("category")

# Encode col1
df["encoded_col1"] = df["col1"].cat.codes
print(df)
```

### Optimize Your Pandas Code with Vectorized Operations

Use pandas' vectorized operations instead of performing operations on each column individually. This leverages pandas' optimized C implementation for better performance, especially with large datasets.

In the following example, the first approach iterates over each column individually, while the second approach uses a vectorized operation to fill the missing values in one go.

```{python}
import pandas as pd
import numpy as np

# Create a sample DataFrame with missing values
data = pd.DataFrame(
    {
        "A": [1, 2, np.nan, 4, 5],
        "B": [np.nan, 2, 3, np.nan, 5],
    }
)

fill_dict = {"A": 3, "B": 1}

# Iterate over each column and fill missing values with 0
df = data.copy()
for col, value in fill_dict.items():
    df[col] = df[col].fillna(value)
print(df)

# Use vectorized operations to fill missing values
df = data.copy()
df = df.fillna(fill_dict)
print(df)
```

### Raise an Exception for a Chained Assignment in pandas

Pandas allows chained assignments, which involve performing multiple indexing operations in a single statement, but they can lead to unexpected results or errors.

The statement below fails to modify the values in `df` as intended, but it doesn't throw an error.

```{python}
import pandas as pd

df = pd.DataFrame({"col1": [-2, 2], "col2": [0, 0]})

# Create a new copy of the selected rows
# Sets the value of `col2` to 1 in the new copy
df[df["col1"] > 0]["col2"] = 1
df
```

Setting `pd.options.mode.chained_assignment` to `'raise'` will cause pandas to raise an exception if a chained assignment occurs.

```{python}
pd.options.mode.chained_assignment = "raise"
df = pd.DataFrame({"col1": [-2, 2], "col2": [0, 0]})
df[df["col1"] > 0]["col2"] = 1
```

```bash
SettingWithCopyError: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
```
