---
title: Better Pandas
jupyter:
  jupytext:
    formats: ipynb,qmd
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.16.7
  kernelspec:
    display_name: Python 3 (ipykernel)
    language: python
    name: python3
---



This section cover tools to make your experience with Pandas a litte bit better.

### tqdm: Add Progress Bar to Your Pandas Apply

```{python}
#| tags: [hide-cell]
!pip install tqdm 
```

If you want to keep informed about the progress of a pandas apply operation, use tqdm.

```{python}
import pandas as pd 
from tqdm import tqdm 
import time 

df = pd.DataFrame({'a': [1, 2, 3, 4, 5], 'b': [2, 3, 4, 5, 6]})

tqdm.pandas()
def func(row):
    time.sleep(1)
    return row + 1

df['a'].progress_apply(func)
```

[Link to tqdm](https://github.com/tqdm/tqdm).

### pandarallel: A Simple Tool to Parallelize Pandas Operations 

```{python}
#| tags: [hide-cell]
!pip install pandarallel
```

If you want to parallelize your Pandas operations on all available CPUs by adding only one line of code, try pandarallel. 

```{python}
from pandarallel import pandarallel
import pandas as pd
from numpy.random import randint

df = pd.DataFrame(
    {
        "a": randint(0, 100, size=10000),
        "b": randint(0, 100, size=10000),
        "c": randint(0, 100, size=10000),
    }
)

pandarallel.initialize(progress_bar=True)
df.parallel_apply(lambda x: x**2)
```

[Link to pandarallel](https://github.com/nalepae/pandarallel).

### PandasAI: Gain Insights From Your pandas DataFrame With AI

```{python}
#| tags: [hide-cell]
!pip install pandasai
```

If you want to quickly gain insights from your pandas DataFrame with AI, use PandasAI. PandasAI serves as: 

- A tool to analyze your DataFrame
- Not a tool to process your DataFrame

```{python}
import pandas as pd  

df = pd.read_csv("https://raw.githubusercontent.com/mwaskom/seaborn-data/master/flights.csv")
df.head(10)
```

```{python}
df.head(5)
```

```{python}
from pandasai import PandasAI
from pandasai.llm.openai import OpenAI

# Instantiate a LLM
llm = OpenAI(api_token="YOUR_API_TOKEN")

# Use pandasai
pandas_ai = PandasAI(llm, conversational=False)
print(
    pandas_ai.run(
        df,
        prompt="Which month of the years has the highest number of passengers on average?",
    )
)
```

```{python}
print(
    pandas_ai.run(
        df, prompt="Which are the five years with the highest passenger numbers?"
    )
)
```

```{python}
print(pandas_ai.run(df, prompt="Within what range of years does the dataset span?"))
```

[Link to PandasAI](https://github.com/gventuri/pandas-ai).

### fugue: Use pandas Functions on the Spark and Dask Engines. 

```{python}
#| tags: [hide-cell]
!pip install fugue pyspark
```

Wouldn't it be nice if you can leverage Spark or Dask to parallelize data science workloads using pandas syntax? Fugue allows you to do exactly that.

Fugue provides the `transform` function allowing users to use pandas functions on the Spark and Dask engines. 

```{python}
import pandas as pd
from typing import Dict
from fugue import transform
from fugue_spark import SparkExecutionEngine

input_df = pd.DataFrame({"id": [0, 1, 2], "fruit": (["apple", "banana", "orange"])})
map_price = {"apple": 2, "banana": 1, "orange": 3}


def map_price_to_fruit(df: pd.DataFrame, mapping: dict) -> pd.DataFrame:
    df["price"] = df["fruit"].map(mapping)
    return df


df = transform(
    input_df,
    map_price_to_fruit,
    schema="*, price:int",
    params=dict(mapping=map_price),
    engine=SparkExecutionEngine,
)
df.show()
```

[Link to fugue](https://github.com/fugue-project/fugue).

### Simplifying Geographic Calculations with GeoPandas

```{python}
#| editable: true
#| slideshow: {slide_type: ''}
#| tags: [hide-cell]
!pip install geopandas
```

Working with geographic data in Python without proper tools can be complex and cumbersome. 

Example of working with geographic data without specialized tools:

```{python}
# Manually handling coordinates and spatial operations
import pandas as pd
import numpy as np

# Complex manual handling of polygon coordinates
df = pd.DataFrame({
    'name': ['Area1', 'Area2'],
    'coordinates': [
        [(0, 0), (1, 0), (1, 1)],
        [(2, 0), (3, 0), (3, 1), (2, 1)]
    ]
})

# Calculate area
def calculate_polygon_area(coordinates):
    x_coords = [point[0] for point in coordinates]
    y_coords = [point[1] for point in coordinates]
    
    # Add first point to end to close the polygon
    x_shifted = x_coords[1:] + x_coords[:1] 
    y_shifted = y_coords[1:] + y_coords[:1]
    
    # Calculate using shoelace formula
    first_sum = sum(x * y for x, y in zip(x_coords, y_shifted))
    second_sum = sum(x * y for x, y in zip(x_shifted, y_coords))
    area = 0.5 * abs(first_sum - second_sum)
    
    return area

df['area'] = df['coordinates'].apply(calculate_polygon_area)
df['area']
```

```{python}
# Calculate parameter
def calculate_perimeter(coordinates):
    # Add first point to end to close the polygon if not already closed
    if coordinates[0] != coordinates[-1]:
        coordinates = coordinates + [coordinates[0]]
    
    # Calculate distance between consecutive points
    distances = []
    for i in range(len(coordinates)-1):
        point1 = coordinates[i]
        point2 = coordinates[i+1]
        # Euclidean distance formula
        distance = np.sqrt((point2[0] - point1[0])**2 + (point2[1] - point1[1])**2)
        distances.append(distance)
    
    return sum(distances)

df['perimeter'] = df['coordinates'].apply(calculate_perimeter)
df['perimeter']
```

With GeoPandas, you can:

- Work with geometric objects (points, lines, polygons) directly in DataFrame-like structures
- Perform spatial operations (intersections, unions, buffers) easily
- Visualize geographic data with simple plotting commands

Example using GeoPandas:

```{python}
import geopandas
from shapely.geometry import Polygon

# Create two polygons
p1 = Polygon([(0, 0), (1, 0), (1, 1)])
p2 = Polygon([(2, 0), (3, 0), (3, 1), (2, 1)])
    
# Create a GeoSeries from the polygons
g = geopandas.GeoSeries([p1, p2])
    
# Print the GeoSeries
g
```

```{python}
# Calculate area
g.area
```

```{python}
# Perimater of each polygon
g.length
```

```{python}
import matplotlib.pyplot as plt

g.plot()
plt.show()
```

[Link to GeoPandas](https://github.com/geopandas/geopandas).
