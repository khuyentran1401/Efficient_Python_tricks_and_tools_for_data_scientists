---
title: Environment Management
jupyter:
  jupytext:
    formats: ipynb,qmd
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.16.7
  kernelspec:
    display_name: Python 3 (ipykernel)
    language: python
    name: python3
---



![](../img/env_image.png)

### virtualenv-clone: Create a Copy of a Virtual Environment

Sometimes you might want to use the same virtual environment for 2 different directories. If you want to create a copy of a virtual environment, use virtualenv-clone. 

The code below shows how to use virtualenv-clone.

```bash
$ pip install virtualenv-clone
$ virtualenv-clone old_venv/ new_venv/

$ source new_venv/bin/activate
```

[Link to virtualenv-clone](https://github.com/edwardgeorge/virtualenv-clone).

### pip-autoremove: Remove a Package and Its Unused Dependencies

When using `pip uninstall`, you only remove a specific package. 

```{python}
#| tags: [hide-cell]
!pip install -U pandas-profiling[notebook]
```

```bash
$ pip uninstall pandas-profiling[notebook] -y
```

```{python}
#| tags: [remove-cell]
!pip uninstall pandas-profiling[notebook] -y
```

Wouldn't it be nice if you can uninstall that package and its unused dependencies? That is when `pip-autoremove` comes in handy. 

```{python}
#| tags: [hide-cell]
!pip install pip-autoremove
```

```{python}
#| tags: [hide-cell]
!pip install -U pandas-profiling[notebook]
```

```bash
$ pip-autoremove pandas-profiling[notebook] -y
```

```{python}
#| tags: [remove-input]
!pip-autoremove pandas-profiling[notebook] -y
```

By using pip-autoremove, pandas-profiling and its unused dependencies are removed!

[Link to pip-autoremove](https://github.com/invl/pip-autoremove).

### pipreqs: Generate requirements.txt File for Any Project Based on Imports

```{python}
#| tags: [hide-cell]
!pip install pipreqs
```

`pip freeze` saves all packages in the environment, including ones that you don't use in your current project. To generate a `requirements.txt` based on imports, use pipreqs. 

For example, to save all packages in your current project to a `requirements.txt` file, run:
```bash
$ pipreqs . 
```

```{python}
#| tags: [remove-input]
!pipreqs . 
```

Your `requirements.txt` should look like below:
```txt
numpy==1.21.4
pandas==1.3.4
pyinstrument==4.0.3
typer==0.4.0
```

Usage of pipreqs:

```bash
Usage:
    pipreqs [options] [<path>]

Arguments:
    <path>                The path to the directory containing the application files for which a requirements file
                          should be generated (defaults to the current working directory)

Options:
    --use-local           Use ONLY local package info instead of querying PyPI
    --pypi-server <url>   Use custom PyPi server
    --proxy <url>         Use Proxy, parameter will be passed to requests library. You can also just set the
                          environments parameter in your terminal:
                          $ export HTTP_PROXY="http://10.10.1.10:3128"
                          $ export HTTPS_PROXY="https://10.10.1.10:1080"
    --debug               Print debug information
    --ignore <dirs>...    Ignore extra directories, each separated by a comma
    --no-follow-links     Do not follow symbolic links in the project
    --encoding <charset>  Use encoding parameter for file open
    --savepath <file>     Save the list of requirements in the given file
    --print               Output the list of requirements in the standard output
    --force               Overwrite existing requirements.txt
    --diff <file>         Compare modules in requirements.txt to project imports
    --clean <file>        Clean up requirements.txt by removing modules that are not imported in project
    --mode <scheme>       Enables dynamic versioning with <compat>, <gt> or <non-pin> schemes
                          <compat> | e.g. Flask~=1.1.2
                          <gt>     | e.g. Flask>=1.1.2
                          <no-pin> | e.g. Flask
```

[Link to pipreqs](https://github.com/bndr/pipreqs/).

### pydeps: Python Module Dependency Visualization

If you want to generate the graph showing the dependencies of your Python modules, try pydeps. 

For example, to generate the dependency graph for files in the folder [top_github_scraper](https://github.com/khuyentran1401/top-github-scraper/tree/master/top_github_scraper), I type:

```bash
$ pydeps top_github_scraper
```
The image below is the output of the command:

![image](../img/top_github_scraper.png)

The folder structure of top_github_scraper looks like the below:

```bash
top_github_scraper
├── __init__.py
├── scrape_repo.py
├── scrape_user.py
└── utils.py
```

[Link to pydeps](https://github.com/thebjorn/pydeps).

### Compare Dependencies of Two Requirements Files

```{python}
#| tags: [hide-cell]
!pip install compare-requirements
```

It can be cumbersome to compare the dependencies between two requirements files. Especially when there are a lot of dependencies in each file. To automate the comparison, use `compare-requirements`. 

For example, if your reqs1.txt looks like this:

```{python}
%%writefile reqs1.txt
numpy==1.19.5
datacommons-pandas==0.0.3
pandas==1.3.3
```

and your reqs2.txt looks like this:

```{python}
%%writefile reqs2.txt
numpy==1.19.5
datacommons-pandas==0.0.3
pandas==1.3.4
pandas-datareader==0.10.0
```

Running 
```bash
$ cmpreqs reqs1.txt reqs2.txt
```
will output:

```{python}
#| tags: [remove-input]
!cmpreqs reqs1.txt reqs2.txt 
```

[Link to compare-requirements](https://github.com/alsur/compare-requirements).

### Poetry: Python Tool for Dependency Management and Packaging 

Have you ever updated a dependency of your project to a new version, and your code suddenly broke? That could be due to the incompatibility of the current dependencies and the new dependency. Wouldn't it be nice if you can check the compatibility between dependencies before installing new ones? That is when Poetry comes in handy.

To understand how Poetry works, start with initializing Poetry:

```bash
$ poetry init
```

```{python}
#| tags: [remove-cell]
!poetry init
```

Next, install the latest versions of pandas and NumPy using:
```bash
$ poetry add pandas numpy
```

```{python}
#| tags: [remove-input]
!poetry add pandas numpy
```

Now your `pyproject.toml` file should look like this:

```yaml
# pyproject.toml
[tool.poetry.dependencies]
python = "^3.8"
pandas = "^1.4.1"
numpy = "^1.22.2"
```

You decide to use the earlier version of NumPy so you run:

```bash
$ poetry add 'numpy<1.18'
```

Since pandas==1.4.1 requires numpy>=1.18.5, numpy<1.18 is not installed. Thus, you avoid installing dependencies that are not compatible with the current dependencies.

```{python}
#| tags: [remove-input]
!poetry add 'numpy<1.18'
```

To view what sub-dependencies of a dependency, type:

```bash
$ poetry show pandas  
```

```{python}
#| tags: [remove-input]
!poetry show pandas  
```

Another cool thing about Poetry is that when you remove a dependency, it also removes sub-dependencies that are no longer needed in your project.

```bash
$ poetry remove pandas 
```

```{python}
#| tags: [remove-input]
!poetry remove pandas 
```

[Link to Poetry](https://python-poetry.org/docs).

[My full article on how to publish your Python package to PyPI using Poetry](https://towardsdatascience.com/how-to-effortlessly-publish-your-python-package-to-pypi-using-poetry-44b305362f9f?gi=f5490e76b74)

### PyInstaller: Bundle a Python Application Into a Single Executable

```{python}
#| tags: [hide-cell]
!pip install pyinstaller
```

To package a Python application along with its dependencies into a single executable, use PyInstaller. With PyInstaller, users can run the packaged app without installing a Python interpreter or any modules.  

To see how PyInstaller works, let's start with creating a `main.py` script that depends on another Python script and various Python modules.

```{python}
%%writefile get_data.py
import pandas as pd  
import numpy as np  

def get_data():
    return pd.DataFrame(np.random.randn(10, 2), columns=['A', 'B'])
```

```{python}
%%writefile main.py
from get_data import get_data

df = get_data()
print(f'Dataframe:\n{df}')
```

Next, execute PyInstaller against the `main.py` script, specifying the `onefile` option to bundle the application into a single file.

```bash
$ pyinstaller main.py --onefile
```

```{python}
#| tags: [remove-cell]
!pyinstaller main.py --onefile
```

After the command completes, your directory structure will look like this:
```bash
.
├── build/
├── dist/
│   └── main
├── main.spec
├── main.py
└── get_data.py
```

The "dist/main" file contains all dependencies and executable for your application.

Now, running the "dist/main" file will execute the application.

```bash
$ ./dist/main
```

```{python}
#| tags: [remove-input]
!./dist/main
```

You can conveniently share this file with your colleagues, allowing them to run the application without any additional setup or installations.

[Link to PyInstaller](https://github.com/pyinstaller/pyinstaller)
